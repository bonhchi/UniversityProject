// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PCWeb.Data;

namespace PCWeb.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "d4c9673a-80ee-4ab2-9b58-366252f349fd",
                            ConcurrencyStamp = "2ab8997d-7170-4000-aa45-1814ff2da966",
                            Name = "Customer",
                            NormalizedName = "CUSTOMER"
                        },
                        new
                        {
                            Id = "7cafcbab-9c20-46b9-912a-7bacfd8cb57a",
                            ConcurrencyStamp = "a5a9ef61-00c2-484c-bbf0-3fc1e49e20b7",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        },
                        new
                        {
                            Id = "f73a45eb-f79b-4eb9-8b7d-42f595df76bd",
                            ConcurrencyStamp = "709ccdf7-45e4-4940-8d7f-2f0a14bbafcf",
                            Name = "Staff",
                            NormalizedName = "STAFF"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("PCWeb.Models.Account.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DayOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<int>("UserGradeId")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<int>("UserPoint")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("UserGradeId");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("PCWeb.Models.Account.UserGrade", b =>
                {
                    b.Property<int>("UserGradeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("UserGradeDiscount")
                        .HasColumnType("float");

                    b.Property<int>("UserGradeEntryPoint")
                        .HasColumnType("int");

                    b.Property<string>("UserGradeName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserGradeId");

                    b.ToTable("UserGrades");

                    b.HasData(
                        new
                        {
                            UserGradeId = 1,
                            UserGradeDiscount = 0.0,
                            UserGradeEntryPoint = 0,
                            UserGradeName = "Khách hàng thường"
                        },
                        new
                        {
                            UserGradeId = 2,
                            UserGradeDiscount = 1.0,
                            UserGradeEntryPoint = 200,
                            UserGradeName = "Khách hàng đồng"
                        },
                        new
                        {
                            UserGradeId = 3,
                            UserGradeDiscount = 1.25,
                            UserGradeEntryPoint = 800,
                            UserGradeName = "Khách hàng bạc"
                        },
                        new
                        {
                            UserGradeId = 4,
                            UserGradeDiscount = 1.5,
                            UserGradeEntryPoint = 1500,
                            UserGradeName = "Khách hàng vàng"
                        },
                        new
                        {
                            UserGradeId = 5,
                            UserGradeDiscount = 2.0,
                            UserGradeEntryPoint = 2000,
                            UserGradeName = "Khách hàng bạch kim"
                        },
                        new
                        {
                            UserGradeId = 6,
                            UserGradeDiscount = 3.0,
                            UserGradeEntryPoint = 5000,
                            UserGradeName = "Khách hàng kim cương"
                        });
                });

            modelBuilder.Entity("PCWeb.Models.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CategoryName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            CategoryName = "Laptop"
                        },
                        new
                        {
                            CategoryId = 2,
                            CategoryName = "PC"
                        },
                        new
                        {
                            CategoryId = 3,
                            CategoryName = "Linh kiện máy tính"
                        });
                });

            modelBuilder.Entity("PCWeb.Models.Comment", b =>
                {
                    b.Property<int>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CommentContent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CommentUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("CommentId");

                    b.HasIndex("ProductId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("PCWeb.Models.Contact", b =>
                {
                    b.Property<int>("ContactId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ContactAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactNote")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactPhone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ContactId");

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("PCWeb.Models.Fee", b =>
                {
                    b.Property<int>("FeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("FeeAmount")
                        .HasColumnType("float");

                    b.Property<string>("FeeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FeeUnit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FeeId");

                    b.ToTable("Fees");

                    b.HasData(
                        new
                        {
                            FeeId = 1,
                            FeeAmount = 3200.0,
                            FeeName = "Phí vận chuyển",
                            FeeUnit = "vnd/kg"
                        },
                        new
                        {
                            FeeId = 2,
                            FeeAmount = 10.0,
                            FeeName = "Thuế VAT",
                            FeeUnit = "%"
                        });
                });

            modelBuilder.Entity("PCWeb.Models.Gift", b =>
                {
                    b.Property<int>("GiftId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("GiftName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PromotionId")
                        .HasColumnType("int");

                    b.HasKey("GiftId");

                    b.HasIndex("PromotionId");

                    b.ToTable("Gifts");
                });

            modelBuilder.Entity("PCWeb.Models.Name.ComponentCategory", b =>
                {
                    b.Property<int>("ComponentCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ComponentCategoryName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ComponentCategoryId");

                    b.ToTable("ComponentCategories");

                    b.HasData(
                        new
                        {
                            ComponentCategoryId = 1,
                            ComponentCategoryName = "CPU"
                        },
                        new
                        {
                            ComponentCategoryId = 2,
                            ComponentCategoryName = "Card đồ họa"
                        },
                        new
                        {
                            ComponentCategoryId = 3,
                            ComponentCategoryName = "Lưu trữ"
                        },
                        new
                        {
                            ComponentCategoryId = 4,
                            ComponentCategoryName = "Mainboard"
                        },
                        new
                        {
                            ComponentCategoryId = 5,
                            ComponentCategoryName = "Tản nhiệt"
                        },
                        new
                        {
                            ComponentCategoryId = 6,
                            ComponentCategoryName = "RAM"
                        },
                        new
                        {
                            ComponentCategoryId = 7,
                            ComponentCategoryName = "Nguồn"
                        },
                        new
                        {
                            ComponentCategoryId = 8,
                            ComponentCategoryName = "Case Máy tính"
                        });
                });

            modelBuilder.Entity("PCWeb.Models.Name.LaptopCategory", b =>
                {
                    b.Property<int>("LaptopCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("LaptopCategoryName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LaptopCategoryId");

                    b.ToTable("LaptopCategories");

                    b.HasData(
                        new
                        {
                            LaptopCategoryId = 1,
                            LaptopCategoryName = "Laptop Phổ Thông"
                        },
                        new
                        {
                            LaptopCategoryId = 2,
                            LaptopCategoryName = "Laptop Gaming"
                        },
                        new
                        {
                            LaptopCategoryId = 3,
                            LaptopCategoryName = "Laptop Doanh Nhân"
                        },
                        new
                        {
                            LaptopCategoryId = 4,
                            LaptopCategoryName = "Laptop Workstation"
                        },
                        new
                        {
                            LaptopCategoryId = 5,
                            LaptopCategoryName = "Laptop Cũ"
                        });
                });

            modelBuilder.Entity("PCWeb.Models.Name.PCCategory", b =>
                {
                    b.Property<int>("PCCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("PCCategoryName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PCCategoryId");

                    b.ToTable("PCCategories");

                    b.HasData(
                        new
                        {
                            PCCategoryId = 1,
                            PCCategoryName = "PC Văn Phòng"
                        },
                        new
                        {
                            PCCategoryId = 2,
                            PCCategoryName = "PC Gaming"
                        },
                        new
                        {
                            PCCategoryId = 3,
                            PCCategoryName = "PC Workstation"
                        },
                        new
                        {
                            PCCategoryId = 4,
                            PCCategoryName = "PC Đồng bộ"
                        },
                        new
                        {
                            PCCategoryId = 5,
                            PCCategoryName = "PC Cũ"
                        });
                });

            modelBuilder.Entity("PCWeb.Models.Name.PCComponent", b =>
                {
                    b.Property<int>("PCComponentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ComponentCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("PCComponentName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("PCComponentId");

                    b.HasIndex("ComponentCategoryId");

                    b.HasIndex("ProductId");

                    b.ToTable("PCComponents");
                });

            modelBuilder.Entity("PCWeb.Models.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CusName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrderCheckout")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrderConditionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PaymentMethodId")
                        .HasColumnType("int");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OrderId");

                    b.HasIndex("OrderConditionId");

                    b.HasIndex("PaymentMethodId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("PCWeb.Models.OrderCondition", b =>
                {
                    b.Property<int>("OrderConditionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("OrderConditionName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OrderConditionId");

                    b.ToTable("OrderConditions");

                    b.HasData(
                        new
                        {
                            OrderConditionId = 1,
                            OrderConditionName = "Đã nhận đơn hàng"
                        },
                        new
                        {
                            OrderConditionId = 2,
                            OrderConditionName = "Đã xem đơn hàng"
                        },
                        new
                        {
                            OrderConditionId = 3,
                            OrderConditionName = "Đang đóng gói"
                        },
                        new
                        {
                            OrderConditionId = 4,
                            OrderConditionName = "Đang vận chuyển"
                        },
                        new
                        {
                            OrderConditionId = 5,
                            OrderConditionName = "Giao hàng thành công"
                        },
                        new
                        {
                            OrderConditionId = 6,
                            OrderConditionName = "Đã hủy đơn"
                        });
                });

            modelBuilder.Entity("PCWeb.Models.OrderDetail", b =>
                {
                    b.Property<int>("OrderDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("OrderDetailId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("PCWeb.Models.PaymentMethod", b =>
                {
                    b.Property<int>("PaymentMethodId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("PaymentMethodName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PaymentMethodId");

                    b.ToTable("PaymentMethods");

                    b.HasData(
                        new
                        {
                            PaymentMethodId = 1,
                            PaymentMethodName = "Tiền mặt"
                        },
                        new
                        {
                            PaymentMethodId = 2,
                            PaymentMethodName = "Paypal"
                        });
                });

            modelBuilder.Entity("PCWeb.Models.Promotion", b =>
                {
                    b.Property<int>("PromotionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("PromotionCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("PromotionDiscount")
                        .HasColumnType("float");

                    b.Property<string>("PromotionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PromotionId");

                    b.ToTable("Promotions");
                });

            modelBuilder.Entity("PCWeb.Models.PromotionDetail", b =>
                {
                    b.Property<int>("PromotionDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("PromotionId")
                        .HasColumnType("int");

                    b.HasKey("PromotionDetailId");

                    b.HasIndex("ProductId");

                    b.HasIndex("PromotionId");

                    b.ToTable("PromotionDetails");
                });

            modelBuilder.Entity("PCWeb.Models.Reply", b =>
                {
                    b.Property<int>("ReplyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CommentId")
                        .HasColumnType("int");

                    b.Property<string>("ReplyContent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReplyUser")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ReplyId");

                    b.HasIndex("CommentId");

                    b.ToTable("Replies");
                });

            modelBuilder.Entity("PCWeb.Models.Revenue", b =>
                {
                    b.Property<int>("RevenueId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateExpired")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DayCreate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ProductCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("ProductImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("ProductPrice")
                        .HasColumnType("float");

                    b.Property<string>("ProductSeries")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RevenueDetailId")
                        .HasColumnType("int");

                    b.HasKey("RevenueId");

                    b.ToTable("Revenues");
                });

            modelBuilder.Entity("PCWeb.Models.RevenueDetail", b =>
                {
                    b.Property<int>("RevenueDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateIssue")
                        .HasColumnType("datetime2");

                    b.Property<double>("PriceReality")
                        .HasColumnType("float");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("RevenueId")
                        .HasColumnType("int");

                    b.HasKey("RevenueDetailId");

                    b.HasIndex("RevenueId");

                    b.ToTable("RevenueDetails");
                });

            modelBuilder.Entity("PCWeb.Models.Root.CPU", b =>
                {
                    b.Property<int>("CPUId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CPUCache")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CPUCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CPUCore")
                        .HasColumnType("int");

                    b.Property<string>("CPUModel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CPUPower")
                        .HasColumnType("int");

                    b.Property<string>("CPUProcess")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CPUSocket")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("CPUSpeed")
                        .HasColumnType("float");

                    b.Property<int>("CPUThread")
                        .HasColumnType("int");

                    b.Property<double>("CPUTurbo")
                        .HasColumnType("float");

                    b.Property<int>("PCComponentId")
                        .HasColumnType("int");

                    b.HasKey("CPUId");

                    b.HasIndex("PCComponentId");

                    b.ToTable("CPUs");
                });

            modelBuilder.Entity("PCWeb.Models.Root.Case", b =>
                {
                    b.Property<int>("CaseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CaseColor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CaseDimension")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CaseDrive")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CaseMaterial")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CasePort")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CaseSpec")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CaseSupport")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PCComponentId")
                        .HasColumnType("int");

                    b.HasKey("CaseId");

                    b.HasIndex("PCComponentId");

                    b.ToTable("Cases");
                });

            modelBuilder.Entity("PCWeb.Models.Root.Cooling", b =>
                {
                    b.Property<int>("CoolingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CoolingColor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CoolingDimension")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CoolingLED")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CoolingMaterial")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CoolingNoise")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CoolingRPM")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CoolingSocket")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CoolingSpec")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CoolingWeight")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PCComponentId")
                        .HasColumnType("int");

                    b.HasKey("CoolingId");

                    b.HasIndex("PCComponentId");

                    b.ToTable("Coolings");
                });

            modelBuilder.Entity("PCWeb.Models.Root.Drive", b =>
                {
                    b.Property<int>("DriveId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DriveCapacity")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DriveConnectivity")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DriveRead")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DriveSize")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DriveSpec")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DriveWrite")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PCComponentId")
                        .HasColumnType("int");

                    b.HasKey("DriveId");

                    b.HasIndex("PCComponentId");

                    b.ToTable("Drives");
                });

            modelBuilder.Entity("PCWeb.Models.Root.Graphic", b =>
                {
                    b.Property<int>("GraphicId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("GraphicBus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GraphicConnector")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GraphicCooling")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GraphicCore")
                        .HasColumnType("int");

                    b.Property<string>("GraphicDimension")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GraphicGPU")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GraphicGPUBoost")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GraphicLED")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GraphicMaxMonitor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GraphicMemFrequency")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GraphicMemory")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GraphicMinPower")
                        .HasColumnType("int");

                    b.Property<string>("GraphicPCI")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GraphicPort")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GraphicPower")
                        .HasColumnType("int");

                    b.Property<string>("GraphicResolution")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GraphicSeries")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PCComponentId")
                        .HasColumnType("int");

                    b.HasKey("GraphicId");

                    b.HasIndex("PCComponentId");

                    b.ToTable("Graphics");
                });

            modelBuilder.Entity("PCWeb.Models.Root.Laptop", b =>
                {
                    b.Property<int>("LaptopId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("LaptopBattery")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LaptopCPU")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LaptopCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("LaptopColor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LaptopConnectivity")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LaptopDimension")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LaptopGPU")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LaptopKeyboard")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LaptopOS")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LaptopPort")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LaptopRAM")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LaptopScreen")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LaptopSeries")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LaptopStorage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LaptopWebcam")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LaptopWeight")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("LaptopId");

                    b.HasIndex("LaptopCategoryId");

                    b.HasIndex("ProductId");

                    b.ToTable("Laptops");
                });

            modelBuilder.Entity("PCWeb.Models.Root.Mainboard", b =>
                {
                    b.Property<int>("MainboardId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("MainboardBusRAM")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MainboardCPU")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MainboardChipset")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MainboardConnection")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MainboardDisplayPort")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MainboardLED")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MainboardM2Support")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MainboardModel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MainboardMultiGPU")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MainboardPCI")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MainboardPort")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MainboardRAMStorage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MainboardRAMSupport")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MainboardSODIMM")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MainboardSize")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MainboardSoundCard")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MainboardStorage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PCComponentId")
                        .HasColumnType("int");

                    b.HasKey("MainboardId");

                    b.HasIndex("PCComponentId");

                    b.ToTable("Mainboards");
                });

            modelBuilder.Entity("PCWeb.Models.Root.Memory", b =>
                {
                    b.Property<int>("MemoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("MemoryBus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MemoryCapacity")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MemoryColor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MemoryGen")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MemoryLED")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PCComponentId")
                        .HasColumnType("int");

                    b.HasKey("MemoryId");

                    b.HasIndex("PCComponentId");

                    b.ToTable("Memories");
                });

            modelBuilder.Entity("PCWeb.Models.Root.PC", b =>
                {
                    b.Property<int>("PCId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("PCCase")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PCCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("PCCooling")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PCCpu")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PCGpu")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PCMainboard")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PCPsu")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PCRam")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PCStorage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("PCId");

                    b.HasIndex("PCCategoryId");

                    b.HasIndex("ProductId");

                    b.ToTable("PCs");
                });

            modelBuilder.Entity("PCWeb.Models.Root.Power", b =>
                {
                    b.Property<int>("PowerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("PCComponentId")
                        .HasColumnType("int");

                    b.Property<int>("PowerCapacity")
                        .HasColumnType("int");

                    b.Property<string>("PowerDimension")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PowerEfficiency")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PowerPort")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PowerId");

                    b.HasIndex("PCComponentId");

                    b.ToTable("Powers");
                });

            modelBuilder.Entity("PCWeb.Models.Source.Brand", b =>
                {
                    b.Property<int>("BrandId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BrandName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BrandId");

                    b.ToTable("Brands");

                    b.HasData(
                        new
                        {
                            BrandId = 1,
                            BrandName = "PCBang"
                        },
                        new
                        {
                            BrandId = 2,
                            BrandName = "PCWorld"
                        });
                });

            modelBuilder.Entity("PCWeb.Models.Source.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BrandId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DayCreate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ProductCode")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<string>("ProductDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("ProductPackage")
                        .HasColumnType("float");

                    b.Property<double>("ProductPrice")
                        .HasColumnType("float");

                    b.Property<double>("ProductPriceReality")
                        .HasColumnType("float");

                    b.Property<int>("ProductQuantity")
                        .HasColumnType("int");

                    b.Property<string>("ProductSeries")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductWarranty")
                        .HasColumnType("int");

                    b.HasKey("ProductId");

                    b.HasIndex("BrandId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("PCWeb.Models.Account.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("PCWeb.Models.Account.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PCWeb.Models.Account.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("PCWeb.Models.Account.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PCWeb.Models.Account.User", b =>
                {
                    b.HasOne("PCWeb.Models.Account.UserGrade", "UserGrade")
                        .WithMany()
                        .HasForeignKey("UserGradeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PCWeb.Models.Comment", b =>
                {
                    b.HasOne("PCWeb.Models.Source.Product", "Product")
                        .WithMany("Comments")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PCWeb.Models.Gift", b =>
                {
                    b.HasOne("PCWeb.Models.Promotion", "Promotion")
                        .WithMany("Gifts")
                        .HasForeignKey("PromotionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PCWeb.Models.Name.PCComponent", b =>
                {
                    b.HasOne("PCWeb.Models.Name.ComponentCategory", "ComponentCategory")
                        .WithMany()
                        .HasForeignKey("ComponentCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PCWeb.Models.Source.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PCWeb.Models.Order", b =>
                {
                    b.HasOne("PCWeb.Models.OrderCondition", "OrderCondition")
                        .WithMany("Orders")
                        .HasForeignKey("OrderConditionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PCWeb.Models.PaymentMethod", "PaymentMethod")
                        .WithMany()
                        .HasForeignKey("PaymentMethodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PCWeb.Models.OrderDetail", b =>
                {
                    b.HasOne("PCWeb.Models.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PCWeb.Models.Source.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PCWeb.Models.PromotionDetail", b =>
                {
                    b.HasOne("PCWeb.Models.Source.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PCWeb.Models.Promotion", "Promotion")
                        .WithMany("PromotionDetails")
                        .HasForeignKey("PromotionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PCWeb.Models.Reply", b =>
                {
                    b.HasOne("PCWeb.Models.Comment", "Comment")
                        .WithMany("Replies")
                        .HasForeignKey("CommentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PCWeb.Models.RevenueDetail", b =>
                {
                    b.HasOne("PCWeb.Models.Revenue", "Revenue")
                        .WithMany("RevenueDetails")
                        .HasForeignKey("RevenueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PCWeb.Models.Root.CPU", b =>
                {
                    b.HasOne("PCWeb.Models.Name.PCComponent", "PCComponent")
                        .WithMany()
                        .HasForeignKey("PCComponentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PCWeb.Models.Root.Case", b =>
                {
                    b.HasOne("PCWeb.Models.Name.PCComponent", "PCComponent")
                        .WithMany()
                        .HasForeignKey("PCComponentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PCWeb.Models.Root.Cooling", b =>
                {
                    b.HasOne("PCWeb.Models.Name.PCComponent", "PCComponent")
                        .WithMany()
                        .HasForeignKey("PCComponentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PCWeb.Models.Root.Drive", b =>
                {
                    b.HasOne("PCWeb.Models.Name.PCComponent", "PCComponent")
                        .WithMany()
                        .HasForeignKey("PCComponentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PCWeb.Models.Root.Graphic", b =>
                {
                    b.HasOne("PCWeb.Models.Name.PCComponent", "PCComponent")
                        .WithMany()
                        .HasForeignKey("PCComponentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PCWeb.Models.Root.Laptop", b =>
                {
                    b.HasOne("PCWeb.Models.Name.LaptopCategory", "LaptopCategory")
                        .WithMany("Laptops")
                        .HasForeignKey("LaptopCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PCWeb.Models.Source.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PCWeb.Models.Root.Mainboard", b =>
                {
                    b.HasOne("PCWeb.Models.Name.PCComponent", "PCComponent")
                        .WithMany()
                        .HasForeignKey("PCComponentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PCWeb.Models.Root.Memory", b =>
                {
                    b.HasOne("PCWeb.Models.Name.PCComponent", "PCComponent")
                        .WithMany()
                        .HasForeignKey("PCComponentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PCWeb.Models.Root.PC", b =>
                {
                    b.HasOne("PCWeb.Models.Name.PCCategory", "PCCategory")
                        .WithMany("PCs")
                        .HasForeignKey("PCCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PCWeb.Models.Source.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PCWeb.Models.Root.Power", b =>
                {
                    b.HasOne("PCWeb.Models.Name.PCComponent", "PCComponent")
                        .WithMany()
                        .HasForeignKey("PCComponentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PCWeb.Models.Source.Product", b =>
                {
                    b.HasOne("PCWeb.Models.Source.Brand", "Brand")
                        .WithMany("Products")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PCWeb.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
